-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

  -- pair of a operator parser (just read a string) and a semantic action (Binop wrapping)
fun parseBinop(op) {
  [s(op), fun (lhs, _, rhs) { Binop(op, lhs, rhs)}]
}

-- Primary expression
var primary = memo $ eta
  syntax (
    x=decimal {Const (stringInt (x))} |
    x=lident  {Var (x)}               |
    inbr[s("("), exp, s(")")]),
  exp = memo $ eta (expr ({
    [Left, map (parseBinop, { "+", "-" })],
    [Left, map (parseBinop, { "*", "/", "%" })],
    [Nona, map (parseBinop, { "<", "<=", "==", "!=", ">=", ">" })],
    [Left, { parseBinop("!!")} ],
    [Left, { parseBinop("&&")} ]
  }, primary));

var stmt = memo $ eta
  syntax(
    kSkip                                   { Skip }             |
    name=lident s[":="] expr=exp            { Assn(name, expr) } |
    kRead name=inbr[s("("), lident, s(")")] { Read(name) }       |
    kWrite expr=inbr[s("("), exp, s(")")]   { Write(expr) } 
  );

-- Public top-level parser
public parse = syntax (stmt | stmt1=stmt s[";"] stmt2=parse { Seq(stmt1, stmt2) });
