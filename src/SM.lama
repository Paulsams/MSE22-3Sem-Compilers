-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    {} -> [stack, state, world] 
  | insn : othersInsns -> eval(
      case insn of
          READ       -> case readWorld(world) of
                          [v, newWorld] -> [v:stack, state, newWorld]
                        esac
        | WRITE      -> case stack of
                          s : remainder -> [remainder, state, writeWorld(s, world)]
                        esac
        | BINOP (s)  -> case stack of
                          left : right : remainder -> [evalOperator(s, left, right) : remainder, state, world]
                        esac
        | LD    (x)  -> [state(x) : stack, state, world]
        | ST    (x)  -> case stack of
                          v : remainder -> [remainder, state <- [x, v], world]
                        esac
        | CONST (n)  -> [n : stack, state, world]
      esac, othersInsns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var   (s)                 -> { LD(s) }
    | Const (i)                 -> { CONST(i) }
    | Binop (op, first, second) -> compileExpr(second) +++ compileExpr(first) +++ { BINOP(op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
      Assn  (varName, expr) -> compileExpr (expr) +++ { ST (varName) } 
    | Seq   (first, second) -> compileSM (first) +++ compileSM (second)
    | Skip                  -> {}
    | Read  (varName)       -> { READ, ST (varName) }  
    | Write (expr)          -> compileExpr (expr) +++ { WRITE }
  esac
}
