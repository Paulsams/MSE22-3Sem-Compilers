-- Expression evaluator

import List;
import State;

public fun evalOperator(operator, a, b){
    case operator of 
        "+" -> a + b
      | "-" -> a - b
      | "*" -> a * b
      | "/" -> a / b
      | "%" -> a % b
      | "<" -> a < b
      | ">" -> a > b
      | "<=" -> a <= b
      | ">=" -> a >= b
      | "==" -> a == b
      | "!=" -> a != b
      | "&&" -> a && b
      | "!!" -> a !! b
    esac 
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr) {
  case expr of
    Var   (varName)    -> state (varName)
  | Const (x)          -> x
  | Binop (operation, exprLeft, exprRight) ->
      var a = evalExpr (state, exprLeft);
      var b = evalExpr (state, exprRight);
      evalOperator(operation, a, b)
  esac
}
